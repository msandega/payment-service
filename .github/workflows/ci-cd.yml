name: CI/CD - Payments API (Environment Fixed)

on:
  workflow_dispatch: {}
  push:
    branches: [ "main-default", "trial" ]
  pull_request:
    branches: [ "main-default", "trial" ]

env:
  IMAGE_PAYMENT: ranckosolutionsinc/payments-service
  IMAGE_TAG: v1.0

jobs:
  build-and-test:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repo
        uses: actions/checkout@v4

      - name: Create a Docker network
        run: docker network create ci-network || true

      - name: Start Mongo (test DB)
        run: |
          docker run -d --name ci-mongo --network ci-network \
            -p 27017:27017 \
            -e MONGO_INITDB_ROOT_USERNAME=mongo \
            -e MONGO_INITDB_ROOT_PASSWORD=password \
            -e MONGO_INITDB_DATABASE=payments_db \
            mongo:4.2

      - name: Wait for MongoDB to be ready
        run: |
          echo "Waiting for MongoDB to be ready..."
          for i in $(seq 1 30); do
            if docker exec ci-mongo mongo --host localhost:27017 --username mongo --password password --authenticationDatabase admin --eval "db.runCommand('ping')" >/dev/null 2>&1; then
              echo "✅ MongoDB is ready!"
              break
            fi
            echo "Waiting for MongoDB... (attempt $i/30)"
            sleep 2
          done

      - name: Pull payment image
        run: docker pull ${{ env.IMAGE_PAYMENT }}:${{ env.IMAGE_TAG }}

      - name: Run payment container (with all required env vars)
        run: |
          docker run -d \
            --name ci-payment \
            --network ci-network \
            -p 3663:3663 \
            -e MONGODB_URI="mongodb://mongo:password@ci-mongo:27017/payments_db?authSource=admin" \
            -e MONGODB_DB_NAME="payments_db" \
            -e RUST_LOG="info" \
            -e RUST_BACKTRACE="1" \
            -e SERVER_HOST="0.0.0.0" \
            -e SERVER_PORT="3663" \
            -e INTASEND_PUBLIC_KEY="${{ secrets.CI_INTASEND_PUBLIC_KEY }}" \
            -e INTASEND_SECRET_KEY="${{ secrets.CI_INTASEND_SECRET_KEY }}" \
            -e INTASEND_TEST_MODE="true" \
            ${{ env.IMAGE_PAYMENT }}:${{ env.IMAGE_TAG }}

      - name: Wait for container to stabilize
        run: |
          echo "Waiting for container to start..."
          sleep 5
          
          # Check if container is still running
          if docker ps --filter name=ci-payment --format "{{.Names}}" | grep -q ci-payment; then
            echo "✅ Container is running"
          else
            echo "❌ Container exited! Showing logs..."
            docker logs ci-payment
            echo "=== Container Status ==="
            docker ps -a --filter name=ci-payment
            exit 1
          fi

      - name: Health check with multiple approaches
        run: |
          echo "=== Starting health checks ==="
          
          # Wait a bit more for the service to fully start
          sleep 10
          
          # Try different health check endpoints and methods
          HEALTH_ENDPOINTS=("/health" "/healthz" "/api/health" "/status" "/" "/ping")
          
          for i in $(seq 1 20); do
            echo "=== Health check attempt $i ==="
            
            # Method 1: From inside the container (most reliable)
            for endpoint in "${HEALTH_ENDPOINTS[@]}"; do
              if docker exec ci-payment curl -sS -m 5 "http://localhost:3663$endpoint" >/dev/null 2>&1; then
                echo "✅ Health check PASSED: Internal localhost$endpoint"
                echo "=== Service is ready! ==="
                exit 0
              fi
            done
            
            # Method 2: From host machine
            for endpoint in "${HEALTH_ENDPOINTS[@]}"; do
              if curl -sS -m 5 "http://localhost:3663$endpoint" >/dev/null 2>&1; then
                echo "✅ Health check PASSED: Host localhost$endpoint"
                echo "=== Service is ready! ==="
                exit 0
              fi
            done
            
            # Method 3: Try container IP directly
            CONTAINER_IP=$(docker inspect ci-payment --format '{{range .NetworkSettings.Networks}}{{.IPAddress}}{{end}}' 2>/dev/null || echo "")
            if [ ! -z "$CONTAINER_IP" ]; then
              for endpoint in "${HEALTH_ENDPOINTS[@]}"; do
                if curl -sS -m 5 "http://$CONTAINER_IP:3663$endpoint" >/dev/null 2>&1; then
                  echo "✅ Health check PASSED: Container IP $CONTAINER_IP$endpoint"
                  echo "=== Service is ready! ==="
                  exit 0
                fi
              done
            fi
            
            # Show progress every 5 attempts
            if (( i % 5 == 0 )); then
              echo "=== Debug Info (Attempt $i) ==="
              echo "Container status:"
              docker ps --filter name=ci-payment
              echo "Recent logs:"
              docker logs --tail 10 ci-payment
              echo "Port check:"
              netstat -tlnp | grep 3663 || echo "Port 3663 not found in netstat"
            fi
            
            sleep 3
          done
          
          echo "❌ Health check failed after 20 attempts"
          echo "=== Final Debug Information ==="
          docker logs ci-payment
          docker ps -a --filter name=ci-payment
          exit 1

      - name: Test API endpoints (if health check passed)
        run: |
          echo "=== Testing API functionality ==="
          
          # Test basic endpoints
          echo "1. Testing root endpoint:"
          curl -sS -D - http://localhost:3663/ | head -10 || true
          
          echo "2. Testing health endpoint:"
          curl -sS -D - http://localhost:3663/health | head -10 || true
          
          # If you have other known endpoints, test them here
          echo "3. Testing any API endpoints:"
          curl -sS -D - http://localhost:3663/api/v1/status | head -10 || true

      - name: Show final container info
        if: always()
        run: |
          echo "=== Final Container Information ==="
          echo "Container status:"
          docker ps -a --filter name=ci-payment
          
          echo "Container logs:"
          docker logs ci-payment
          
          echo "Container environment:"
          docker exec ci-payment env | grep -E "(MONGODB|SERVER|INTASEND)" || true
          
          echo "Container processes:"
          docker exec ci-payment ps aux || true

      - name: Cleanup containers (always)
        if: always()
        run: |
          echo "=== Cleaning up containers ==="
          docker rm -f ci-payment ci-mongo || true
          docker network rm ci-network || true
          echo "Cleanup completed"