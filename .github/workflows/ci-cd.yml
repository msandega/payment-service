name: CI/CD - Payments API (All Environment Variables Fixed)

on:
  workflow_dispatch: {}
  push:
    branches: [ "main-default", "trial" ]
  pull_request:
    branches: [ "main-default", "trial" ]

env:
  IMAGE_PAYMENT: ranckosolutionsinc/payments-service
  IMAGE_TAG: v1.0

jobs:
  build-and-test:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repo
        uses: actions/checkout@v4

      - name: Create a Docker network
        run: docker network create ci-network || true

      - name: Start Mongo (test DB)
        run: |
          docker run -d --name ci-mongo --network ci-network \
            -p 27017:27017 \
            -e MONGO_INITDB_ROOT_USERNAME=mongo \
            -e MONGO_INITDB_ROOT_PASSWORD=password \
            -e MONGO_INITDB_DATABASE=payments_db \
            mongo:4.2

      - name: Wait for MongoDB to be ready
        run: |
          echo "Waiting for MongoDB to be ready..."
          for i in $(seq 1 30); do
            if docker exec ci-mongo mongo --host localhost:27017 --username mongo --password password --authenticationDatabase admin --eval "db.runCommand('ping')" >/dev/null 2>&1; then
              echo "✅ MongoDB is ready!"
              break
            fi
            echo "Waiting for MongoDB... (attempt $i/30)"
            sleep 2
          done

      - name: Pull payment image
        run: docker pull ${{ env.IMAGE_PAYMENT }}:${{ env.IMAGE_TAG }}

      - name: Run payment container (with required env vars)
        run: |
          echo "Starting payment container with minimal required environment..."
          docker run -d \
            --name ci-payment \
            --network ci-network \
            -p 3663:3663 \
            -e HOST_ADDRESS=0.0.0.0:3663 \
            -e PORT=3663 \
            -e MONGODB_URI="mongodb://mongo:password@ci-mongo:27017/payments_db?authSource=admin" \
            -e INTASEND_PUBLIC_KEY="${{ secrets.CI_INTASEND_PUBLIC_KEY }}" \
            -e INTASEND_SECRET_KEY="${{ secrets.CI_INTASEND_SECRET_KEY }}" \
            -e INTASEND_TEST_MODE=true \
            ${{ env.IMAGE_PAYMENT }}:${{ env.IMAGE_TAG }}

      - name: Wait and check container status
        run: |
          echo "Waiting for container to initialize..."
          sleep 10
          
          echo "=== Container Status Check ==="
          if docker ps --filter name=ci-payment --format "{{.Names}}" | grep -q ci-payment; then
            echo "✅ Container is running successfully!"
            
            echo "=== Container Details ==="
            docker ps --filter name=ci-payment --format "table {{.Names}}\t{{.Status}}\t{{.Ports}}"
            
            echo "=== Recent Container Logs ==="
            docker logs --tail 20 ci-payment
            
          else
            echo "❌ Container failed to start or exited!"
            echo "=== Container Status ==="
            docker ps -a --filter name=ci-payment --format "table {{.Names}}\t{{.Status}}\t{{.Command}}"
            
            echo "=== Full Container Logs ==="
            docker logs ci-payment
            
            echo "=== Container Inspection ==="
            docker inspect ci-payment --format '{{json .State}}' | python3 -m json.tool 2>/dev/null || echo "Cannot parse container state"
            
            exit 1
          fi

      - name: Comprehensive health check
        run: |
          echo "=== Starting comprehensive health checks ==="
          
          # First, let the service fully initialize
          sleep 15
          
          # Define all possible endpoints to test
          ENDPOINTS=(
            "/health"
            "/healthz" 
            "/healthcheck"
            "/status"
            "/ping"
            "/ready"
            "/api/health"
            "/api/v1/health"
            "/api/status"
            "/"
          )
          
          echo "Testing ${#ENDPOINTS[@]} different endpoints..."
          
          # Try multiple approaches for each endpoint
          for attempt in $(seq 1 25); do
            echo "=== Health check attempt $attempt/25 ==="
            
            # Method 1: From inside container (most reliable)
            echo "Testing from inside container..."
            for endpoint in "${ENDPOINTS[@]}"; do
              if docker exec ci-payment curl -sS -f -m 5 "http://localhost:3663$endpoint" >/dev/null 2>&1; then
                echo "✅ SUCCESS: Internal check passed for $endpoint"
                echo "=== Getting actual response ==="
                docker exec ci-payment curl -sS -m 5 "http://localhost:3663$endpoint"
                echo "=== Service is healthy and ready! ==="
                exit 0
              fi
            done
            
            # Method 2: From host machine
            echo "Testing from host machine..."
            for endpoint in "${ENDPOINTS[@]}"; do
              if curl -sS -f -m 5 "http://localhost:3663$endpoint" >/dev/null 2>&1; then
                echo "✅ SUCCESS: Host check passed for $endpoint"
                echo "=== Getting actual response ==="
                curl -sS -m 5 "http://localhost:3663$endpoint"
                echo "=== Service is healthy and ready! ==="
                exit 0
              fi
            done
            
            # Method 3: Container IP (if accessible)
            CONTAINER_IP=$(docker inspect ci-payment --format '{{range .NetworkSettings.Networks}}{{.IPAddress}}{{end}}' 2>/dev/null || echo "")
            if [ ! -z "$CONTAINER_IP" ] && [ "$CONTAINER_IP" != "null" ]; then
              echo "Testing container IP: $CONTAINER_IP"
              for endpoint in "${ENDPOINTS[@]}"; do
                if curl -sS -f -m 5 "http://$CONTAINER_IP:3663$endpoint" >/dev/null 2>&1; then
                  echo "✅ SUCCESS: Container IP check passed for $endpoint"
                  curl -sS -m 5 "http://$CONTAINER_IP:3663$endpoint"
                  echo "=== Service is healthy and ready! ==="
                  exit 0
                fi
              done
            fi
            
            # Show debug info every 5 attempts
            if (( attempt % 5 == 0 )); then
              echo "=== Debug Information (Attempt $attempt) ==="
              
              echo "Container status:"
              docker ps --filter name=ci-payment --format "table {{.Names}}\t{{.Status}}\t{{.Ports}}"
              
              echo "Recent logs:"
              docker logs --tail 10 ci-payment
              
              echo "Network information:"
              docker inspect ci-payment --format '{{.NetworkSettings.IPAddress}}' 2>/dev/null || echo "No IP found"
              
              echo "Port bindings:"
              docker port ci-payment 2>/dev/null || echo "No port bindings found"
              
              echo "Host port check:"
              netstat -tlnp | grep 3663 || echo "Port 3663 not bound on host"
              
              echo "Process check in container:"
              docker exec ci-payment ps aux 2>/dev/null | head -10 || echo "Cannot check processes"
            fi
            
            sleep 3
          done
          
          echo "❌ All health checks failed after 25 attempts!"
          echo "=== Final Debug Information ==="
          
          echo "Final container logs:"
          docker logs ci-payment
          
          echo "Container environment:"
          docker exec ci-payment env | sort || echo "Cannot access container environment"
          
          echo "Container filesystem (app directory):"
          docker exec ci-payment ls -la / || echo "Cannot access container filesystem"
          
          echo "Network connectivity test:"
          docker exec ci-payment ping -c 2 ci-mongo || echo "Cannot ping MongoDB"
          
          exit 1

      - name: API functionality test (if health passed)
        run: |
          echo "=== Testing API functionality ==="
          
          # Test different endpoints with various methods
          echo "1. Root endpoint:"
          curl -sS -D - -m 10 http://localhost:3663/ | head -20 || echo "Root endpoint failed"
          
          echo "2. Health endpoint:"
          curl -sS -D - -m 10 http://localhost:3663/health | head -20 || echo "Health endpoint failed"
          
          echo "3. Status endpoint:"
          curl -sS -D - -m 10 http://localhost:3663/status | head -20 || echo "Status endpoint failed"
          
          echo "4. API endpoints:"
          curl -sS -D - -m 10 http://localhost:3663/api/v1/health | head -20 || echo "API health endpoint failed"

      - name: Final container diagnostics
        if: always()
        run: |
          echo "=== Final Container Diagnostics ==="
          
          echo "Container status:"
          docker ps -a --filter name=ci-payment --format "table {{.Names}}\t{{.Status}}\t{{.Ports}}\t{{.Command}}"
          
          echo "Complete container logs:"
          docker logs ci-payment 2>&1 | tail -50
          
          echo "Container environment variables:"
          docker exec ci-payment env | grep -E "(HOST|PORT|MONGO|SERVER|INTASEND)" | sort || echo "Cannot access environment"
          
          echo "Container network settings:"
          docker inspect ci-payment --format '{{json .NetworkSettings}}' | python3 -m json.tool 2>/dev/null || echo "Cannot inspect network settings"

      - name: Cleanup containers (always)
        if: always()
        run: |
          echo "=== Cleaning up containers ==="
          docker rm -f ci-payment ci-mongo || true
          docker network rm ci-network || true
          echo "Cleanup completed"
          # Debug Environment Variables Step
# Add this to your CI/CD pipeline to debug environment variable issues

      - name: Debug Environment Variables
        run: |
          echo "=== DEBUGGING ENVIRONMENT VARIABLES ==="
          
          echo "1. Testing simple container with env vars:"
          docker run --rm -e TEST_VAR="hello" alpine sh -c 'echo "TEST_VAR=$TEST_VAR"'
          
          echo "2. Testing if our specific env vars work:"
          docker run --rm \
            -e MONGODB_DB_NAME="payments_db" \
            -e HOST_ADDRESS="0.0.0.0" \
            alpine sh -c 'echo "MONGODB_DB_NAME=$MONGODB_DB_NAME"; echo "HOST_ADDRESS=$HOST_ADDRESS"'
          
          echo "3. Testing our payment service with debug info:"
          docker run --rm \
            -e MONGODB_DB_NAME="payments_db" \
            -e HOST_ADDRESS="0.0.0.0" \
            -e RUST_BACKTRACE="full" \
            ${{ env.IMAGE_PAYMENT }}:${{ env.IMAGE_TAG }} sh -c 'env | grep -E "(MONGODB|HOST)" || echo "No env vars found"' || \
          echo "Service doesn't have shell access, checking container directly..."

      - name: Run payment container (FIXED with explicit env vars)
        run: |
          echo "=== Starting payment container with explicit environment variables ==="
          
          # Create the container with explicit environment variables
          docker run -d \
            --name ci-payment \
            --network ci-network \
            -p 3663:3663 \
            --env MONGODB_URI="mongodb://mongo:password@ci-mongo:27017/payments_db?authSource=admin" \
            --env MONGODB_DB_NAME="payments_db" \
            --env HOST_ADDRESS="0.0.0.0" \
            --env SERVER_HOST="0.0.0.0" \
            --env SERVER_PORT="3663" \
            --env PORT="3663" \
            --env RUST_LOG="info" \
            --env RUST_BACKTRACE="full" \
            --env INTASEND_PUBLIC_KEY="${{ secrets.CI_INTASEND_PUBLIC_KEY || 'pk_test_dummy' }}" \
            --env INTASEND_SECRET_KEY="${{ secrets.CI_INTASEND_SECRET_KEY || 'sk_test_dummy' }}" \
            --env INTASEND_TEST_MODE="true" \
            ${{ env.IMAGE_PAYMENT }}:${{ env.IMAGE_TAG }}
          
          echo "Container started with ID: $(docker ps -lq)"

      - name: Verify environment variables in container
        run: |
          echo "=== Verifying environment variables inside container ==="
          
          # Wait a moment for container to start
          sleep 2
          
          # Check if container exists and get its status
          if docker ps -a --filter name=ci-payment --format "{{.Names}}" | grep -q ci-payment; then
            echo "Container exists. Checking environment variables..."
            
            # Try to inspect environment variables
            echo "Environment variables in container:"
            docker inspect ci-payment --format '{{range .Config.Env}}{{println .}}{{end}}' | grep -E "(MONGODB|HOST|PORT|INTASEND)" || echo "No matching env vars found in inspect"
            
            # If container is still running, try to exec into it
            if docker ps --filter name=ci-payment --format "{{.Names}}" | grep -q ci-payment; then
              echo "Container is running. Checking internal environment:"
              docker exec ci-payment sh -c 'env | grep -E "(MONGODB|HOST|PORT|INTASEND)" | sort' || echo "Cannot exec into container"
            else
              echo "Container exited. Checking logs:"
              docker logs ci-payment
            fi
          else
            echo "Container not found!"
          fi

      - name: Alternative approach - Environment file
  run: |
    echo "=== Trying with environment file approach ==="
    
    # Clean up any existing container
    docker rm -f ci-payment || true
    
    # Create environment file
    cat > payment.env << EOF
    MONGODB_URI=mongodb://mongo:password@ci-mongo:27017/payments_db?authSource=admin
    MONGODB_DB_NAME=payments_db
    HOST_ADDRESS=0.0.0.0
    SERVER_HOST=0.0.0.0
    SERVER_PORT=3663
    PORT=3663
    RUST_LOG=info
    RUST_BACKTRACE=full
    INTASEND_PUBLIC_KEY=${{ secrets.CI_INTASEND_PUBLIC_KEY || 'pk_test_dummy' }}
    INTASEND_SECRET_KEY=${{ secrets.CI_INTASEND_SECRET_KEY || 'sk_test_dummy' }}
    INTASEND_TEST_MODE=true
    EOF
    
    echo "Environment file contents:"
    cat payment.env
    
    # Start container with environment file
    docker run -d \
      --name ci-payment \
      --network ci-network \
      -p 3663:3663 \
      --env-file payment.env \
      ${{ env.IMAGE_PAYMENT }}:${{ env.IMAGE_TAG }}
    
    echo "Container started with environment file"

    - name: Final environment check
      run: |
        echo "=== Final environment verification ==="
        
        sleep 5
        
        if docker ps --filter name=ci-payment --format "{{.Names}}" | grep -q ci-payment; then
          echo "✅ Container is running!"
          
          echo "Container environment (from inspect):"
          docker inspect ci-payment --format '{{range .Config.Env}}{{println .}}{{end}}' | sort
          
          echo "Container logs:"
          docker logs ci-payment | head -20
          
        else
          echo "❌ Container still failing"
          echo "Container status:"
          docker ps -a --filter name=ci-payment
          
          echo "Container logs:"
          docker logs ci-payment
          
          echo "Container environment (from inspect):"
          docker inspect ci-payment --format '{{range .Config.Env}}{{println .}}{{end}}' | sort
        fi