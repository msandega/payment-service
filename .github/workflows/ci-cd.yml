name: CI/CD - Payments API

on:
  workflow_dispatch: {}
  push:
    branches: [ "main-default", "trial" ]
  pull_request:
    branches: [ "main-default", "trial" ]

env:
  IMAGE_PAYMENT: ranckosolutionsinc/payments-service
  IMAGE_TAG: v1.0

jobs:
  build-and-test:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repo
        uses: actions/checkout@v4

      - name: Create a Docker network
        run: docker network create ci-network || true

      - name: Start Mongo (test DB)
        run: |
          docker run -d --name ci-mongo --network ci-network \
            -e MONGO_INITDB_ROOT_USERNAME=mongo \
            -e MONGO_INITDB_ROOT_PASSWORD=password \
            mongo:4.2

      - name: Wait for MongoDB to be ready
        run: |
          echo "Waiting for MongoDB to be ready..."
          for i in $(seq 1 30); do
            if docker exec ci-mongo mongo --host localhost:27017 --username mongo --password password --authenticationDatabase admin --eval "db.runCommand('ping')" >/dev/null 2>&1; then
              echo "MongoDB is ready!"
              break
            fi
            echo "Waiting for MongoDB... (attempt $i/30)"
            sleep 2
          done

      - name: Pull payment image
        run: docker pull ${{ env.IMAGE_PAYMENT }}:${{ env.IMAGE_TAG }}

      - name: Run payment container (test mode)
        env:
          MONGODB_URI: mongodb://mongo:password@ci-mongo:27017/?authSource=admin
        run: |
          docker run -d \
            --name ci-payment \
            --network ci-network \
            -e MONGODB_URI="${MONGODB_URI}" \
            -e INTASEND_PUBLIC_KEY="${{ secrets.CI_INTASEND_PUBLIC_KEY }}" \
            -e INTASEND_SECRET_KEY="${{ secrets.CI_INTASEND_SECRET_KEY }}" \
            -e INTASEND_TEST_MODE=true \
            -p 3663:3663 \
            ${{ env.IMAGE_PAYMENT }}:${{ env.IMAGE_TAG }}

      - name: Check container logs
        run: |
          echo "=== Payment Service Container Logs ==="
          docker logs ci-payment || true
          echo "=== Container Status ==="
          docker ps -a --filter name=ci-payment

      - name: Wait for payment service (try multiple endpoints)
        run: |
          echo "Waiting for payment service to be ready..."
          
          # Try different health check endpoints
          HEALTH_ENDPOINTS=("/healthz" "/health" "/api/health" "/status" "/api/v1/health" "/")
          
          for endpoint in "${HEALTH_ENDPOINTS[@]}"; do
            echo "Trying endpoint: $endpoint"
            for i in $(seq 1 15); do
              echo "Attempt $i for $endpoint ..."
              if curl -sS -m 5 "http://localhost:3663$endpoint" >/dev/null 2>&1; then
                echo "‚úÖ Service is ready at $endpoint"
                exit 0
              fi
              sleep 2
            done
          done
          
          echo "‚ùå Service did not respond on any endpoint within timeout"
          echo "=== Final Container Logs ==="
          docker logs ci-payment || true
          echo "=== Container Status ==="
          docker ps -a --filter name=ci-payment
          exit 1

      - name: Test service endpoints
        run: |
          echo "=== Testing available endpoints ==="
          
          # Test root endpoint
          echo "Testing root endpoint:"
          curl -sS -D - http://localhost:3663/ | head -20 || true
          
          echo -e "\n=== Testing potential health endpoints ==="
          for endpoint in /healthz /health /api/health /status /api/v1/health; do
            echo "Testing $endpoint:"
            curl -sS -D - "http://localhost:3663$endpoint" | head -10 || echo "Endpoint $endpoint not available"
            echo "---"
          done

      - name: Run API tests (if endpoints work)
        run: |
          echo "=== Running basic API tests ==="
          
          # Test if any endpoint responds with 200
          if curl -sS -f http://localhost:3663/ >/dev/null 2>&1; then
            echo "‚úÖ Root endpoint is working"
          elif curl -sS -f http://localhost:3663/health >/dev/null 2>&1; then
            echo "‚úÖ Health endpoint is working"  
          elif curl -sS -f http://localhost:3663/api/v1/health >/dev/null 2>&1; then
            echo "‚úÖ API health endpoint is working"
          else
            echo "‚ö†Ô∏è No standard endpoints responding, but service might still be working"
          fi
          
          # Log final status
          echo "=== Final Service Status ==="
          docker logs --tail 50 ci-payment || true

      - name: Cleanup containers (always)
        if: always()
        run: |
          echo "=== Cleaning up containers ==="
          docker rm -f ci-payment ci-mongo || true
          docker network rm ci-network || true
          echo "Cleanup completed"

  security-scan:
    runs-on: ubuntu-latest
    needs: build-and-test
    if: success()
    
    steps:
      - name: Checkout repo
        uses: actions/checkout@v4
        
      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: ${{ env.IMAGE_PAYMENT }}:${{ env.IMAGE_TAG }}
          format: 'sarif'
          output: 'trivy-results.sarif'
        continue-on-error: true

      - name: Upload Trivy scan results
        uses: github/codeql-action/upload-sarif@v2
        if: always()
        with:
          sarif_file: 'trivy-results.sarif'
        continue-on-error: true

  deploy:
    runs-on: ubuntu-latest
    needs: [build-and-test, security-scan]
    if: github.ref == 'refs/heads/main-default' && github.event_name == 'push'
    
    steps:
      - name: Deploy to production
        run: |
          echo "üöÄ Deploying to production..."
          echo "This step would typically:"
          echo "1. Deploy to your cloud platform (Render/Railway)"
          echo "2. Update production environment"
          echo "3. Run post-deployment health checks"
          
          # Add your actual deployment commands here
          # For example, for Render:
          # curl -X POST "https://api.render.com/deploy/srv-YOUR-SERVICE-ID" \
          #   -H "Authorization: Bearer ${{ secrets.RENDER_API_KEY }}"