name: CI/CD - Payments API

on:
  workflow_dispatch: {}
  push:
    branches: [ "main-default", "trial" ]
  pull_request:
    branches: [ "main-default", "trial" ]

env:
  IMAGE_PAYMENT: ranckosolutionsinc/payments-service
  IMAGE_TAG: v1.0

jobs:
  build-and-test:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repo
        uses: actions/checkout@v4

      - name: Start MongoDB and Payment Service
        run: |
          echo "üöÄ Starting MongoDB and Payment Service..."
          
          # Start MongoDB with host networking (easier connectivity)
          docker run -d \
            --name ci-mongo \
            --network host \
            -e MONGO_INITDB_ROOT_USERNAME=mongo \
            -e MONGO_INITDB_ROOT_PASSWORD=password \
            -e MONGO_INITDB_DATABASE=payments_db \
            mongo:4.2
          
          # Wait for MongoDB to be ready
          echo "‚è≥ Waiting for MongoDB..."
          for i in {1..30}; do
            if curl -s http://localhost:27017 >/dev/null 2>&1 || nc -z localhost 27017 2>/dev/null; then
              echo "‚úÖ MongoDB is ready!"
              break
            fi
            echo "Waiting for MongoDB... (attempt $i/30)"
            sleep 2
          done
          
          # Create environment file for payment service
          cat > payment.env << 'EOF'
          MONGODB_URI=mongodb://mongo:password@127.0.0.1:27017/payments_db?authSource=admin
          MONGODB_DB_NAME=payments_db
          HOST_ADDRESS=0.0.0.0
          SERVER_HOST=0.0.0.0
          SERVER_PORT=3663
          PORT=3663
          RUST_LOG=info
          RUST_BACKTRACE=full
          INTASEND_TEST_MODE=true
          INTASEND_PUBLIC_KEY=pk_test_dummy_for_ci_testing
          INTASEND_SECRET_KEY=sk_test_dummy_for_ci_testing
          EOF
          
          # Override with real secrets if they exist
          if [ ! -z "${{ secrets.CI_INTASEND_PUBLIC_KEY }}" ]; then
            sed -i "s/pk_test_dummy_for_ci_testing/${{ secrets.CI_INTASEND_PUBLIC_KEY }}/g" payment.env
          fi
          if [ ! -z "${{ secrets.CI_INTASEND_SECRET_KEY }}" ]; then
            sed -i "s/sk_test_dummy_for_ci_testing/${{ secrets.CI_INTASEND_SECRET_KEY }}/g" payment.env
          fi
          
          echo "üìã Environment file contents:"
          cat payment.env
          
          # Pull payment service image
          docker pull ${{ env.IMAGE_PAYMENT }}:${{ env.IMAGE_TAG }}
          
          # Start payment service with host networking
          docker run -d \
            --name ci-payment \
            --network host \
            --env-file payment.env \
            ${{ env.IMAGE_PAYMENT }}:${{ env.IMAGE_TAG }}
          
          echo "üéâ Services started!"

      - name: Verify Services
        run: |
          echo "üîç Verifying services..."
          sleep 10
          
          # Check containers
          echo "üìä Container status:"
          docker ps -a --format "table {{.Names}}\t{{.Status}}\t{{.Ports}}"
          
          # Check if payment service is running
          if docker ps --filter name=ci-payment --format "{{.Names}}" | grep -q ci-payment; then
            echo "‚úÖ Payment service container is running"
          else
            echo "‚ùå Payment service failed!"
            docker logs ci-payment
            exit 1
          fi
          
          # Check MongoDB
          if docker ps --filter name=ci-mongo --format "{{.Names}}" | grep -q ci-mongo; then
            echo "‚úÖ MongoDB container is running"
          else
            echo "‚ùå MongoDB failed!"
            docker logs ci-mongo
            exit 1
          fi
          
          echo "üìã Payment service logs:"
          docker logs ci-payment | head -20

      - name: Health Check
        run: |
          echo "üè• Starting health checks..."
          
          # Test different endpoints
          ENDPOINTS=("/health" "/healthz" "/" "/status" "/ping" "/api/health")
          
          for attempt in {1..20}; do
            echo "üîÑ Health check attempt $attempt/20"
            
            for endpoint in "${ENDPOINTS[@]}"; do
              if curl -sf -m 5 "http://localhost:3663$endpoint" >/dev/null 2>&1; then
                echo "‚úÖ SUCCESS! Service responding on $endpoint"
                echo "üìÑ Response:"
                curl -s -m 5 "http://localhost:3663$endpoint"
                echo ""
                echo "üéâ Health check passed!"
                exit 0
              fi
            done
            
            # Debug info every 5 attempts
            if (( attempt % 5 == 0 )); then
              echo "üîç Debug info (attempt $attempt):"
              echo "Port status:"
              netstat -tlnp | grep 3663 || echo "Port 3663 not bound"
              echo "Recent logs:"
              docker logs --tail 5 ci-payment
            fi
            
            sleep 3
          done
          
          echo "‚ùå Health check failed after 20 attempts"
          echo "üìã Final debug info:"
          docker logs ci-payment
          docker ps -a
          exit 1

      - name: API Tests
        run: |
          echo "üß™ Running API tests..."
          
          # Test root endpoint
          echo "Testing root endpoint:"
          curl -i -m 10 http://localhost:3663/ || echo "Root endpoint test failed"
          
          # Test health endpoint  
          echo "Testing health endpoint:"
          curl -i -m 10 http://localhost:3663/health || echo "Health endpoint test failed"
          
          # Test any other known endpoints
          echo "Testing status endpoint:"
          curl -i -m 10 http://localhost:3663/status || echo "Status endpoint test failed"

      - name: Cleanup
        if: always()
        run: |
          echo "üßπ Cleaning up..."
          docker rm -f ci-payment ci-mongo || true
          rm -f payment.env || true
          echo "‚úÖ Cleanup completed"

  # Optional: Security scanning (only if main tests pass)
  security:
    runs-on: ubuntu-latest
    needs: build-and-test
    if: success()
    steps:
      - name: Security Scan
        run: |
          echo "üõ°Ô∏è Running security scan..."
          docker pull ${{ env.IMAGE_PAYMENT }}:${{ env.IMAGE_TAG }}
          
          # Basic vulnerability scan
          docker run --rm -v /var/run/docker.sock:/var/run/docker.sock \
            aquasec/trivy image --no-progress --severity HIGH,CRITICAL \
            ${{ env.IMAGE_PAYMENT }}:${{ env.IMAGE_TAG }} || echo "Security scan completed with warnings"

  # Optional: Deploy (only on main branch)
  deploy:
    runs-on: ubuntu-latest
    needs: [build-and-test, security]
    if: github.ref == 'refs/heads/main-default' && github.event_name == 'push' && success()
    steps:
      - name: Deploy to Production
        run: |
          echo "üöÄ Deploying to production..."
          echo "Deployment would happen here"
          # Add your deployment commands here
          # For example:
          # curl -X POST "https://api.render.com/deploy/srv-YOUR-ID" \
          #   -H "Authorization: Bearer ${{ secrets.RENDER_API_KEY }}"